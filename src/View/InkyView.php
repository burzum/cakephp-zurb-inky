<?php
namespace Burzum\ZurbInky\View;

use Cake\View\View;
use InvalidArgumentException;
use Pelago\Emogrifier;
use Pinky;
use RuntimeException;

class InkyView extends View
{

    protected $_css;

    protected $_emogriefer;

    /**
     * @inheritDoc
     */
    public function initialize() {
        parent::initialize(); // TODO: Change the autogenerated stub

        $this->_emogriefer = new Emogrifier();
    }

    /**
     * @inheritDoc
     */
    public function render($view = null, $layout = null)
    {
        $output = parent::render($view, $layout);
        $output = Pinky\transformString($output)->saveHTML();

        if (!empty($css)) {
            $this->getEmogriefer()->setCss($this->_css);
            $this->getEmogriefer()->setHtml($output);

            return $this->getEmogriefer()->emogrify();
        }

        return $output;
    }

    /**
     * Gets the Emogriefer instance
     *
     * @return \Pelago\Emogrifier
     */
    public function getEmogriefer()
    {
        return $this->_emogriefer;
    }

    /**
     * Sets the CSS file
     *
     * @param string $css CSS File
     * @return $this
     */
    public function setCss($css)
    {
        if (!is_string()) {
            throw new InvalidArgumentException('The first argument must be a string!');
        }

        if (!file_exists($css)) {
            throw new RuntimeException(sprintf('The CSS file `%s` does not exist.', $css));
        }

        $css = file_get_contents($css);

        // Emogriefer works only with UTF-8
        if (!mb_check_encoding($css, 'UTF-8')) {
            throw new RuntimeException('The CSS file must be UTF-8 encoded!');
        }

        $this->_emogriefer->setCss($css);

        return $this;
    }
}
